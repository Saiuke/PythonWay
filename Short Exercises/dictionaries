students = {
    "Peter": {"age": 10, "address": "Lisbon"},
    "Anne": {"age": 12, "address": "London"},
    "Edgar": {"age": 15, "address": "Paris"},
    "Allan": {"age": 18, "address": "London"},
    "Caroline": {"age": 13, "address": "Paris"},
    "Samuel": {"age": 16, "address": "Lisbon"}
}


def printStudents(dic):
    for studentId, studentInfo in dic.items():
        print("\n Person name: ", studentId)
        for key in studentInfo:
            print(key + ": ", studentInfo[key])


printStudents(students)

####################################################################

# This function returns the size of a dictionary

print(len(students))
print(list(students))
print(students['Anne'])
print(students['Anne']['age'])
print("Samuel" in students)
print(reversed(students))


# Retorna a idade media das pessoas

def averageAge(dic):
    length = len(dic)
    allAges = sum([dic[i]['age'] for i in dic])
    return allAges / length


print(averageAge(students))


####################################################################

# Estudante mais velho

def estudanteVelho(dic):
    nomes = list(dic.keys())
    idades = list([dic[i]['age'] for i in dic])
    return nomes[idades.index(max(idades))]


print(estudanteVelho(students))


####################################################################

# Updates the ages of the students in n years

def envelheceStudents(dic, n):
    for studentName in dic:
        dic[studentName]['age'] = dic[studentName]['age'] + n
    return dic

print(envelheceStudents(students, 3))

####################################################################

#Returns the lenght of a dictionary

def returnLen(dic):
    return (len(dic.keys()))

print(returnLen(students))

####################################################################

# Return all students that lives in a certain city

def studentsByCity(dic, city):
    selectedStudents = [i for i in dic.keys() if dic[i]['address'] == city]
    return selectedStudents

print(studentsByCity(students, 'London'))